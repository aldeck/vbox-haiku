# $Id$
## @file
# The Recompiler Sub-Makefile.
#
# There are a few of complicating factors here, esp. on AMD64 systems:
#
#   * op.c doesn't compile work correctly with gcc 4. For this we've
#     checked in op.S, which is the reason why we don't compile op.c
#     directly but always compile via the assembly file.s
#   * On 64-bit Windows we lack a compiler and have to resort to a
#     linux cross compiler building an ELF relocatable module which
#     we then load using a wrapper module. Thus the REM_MOD mess.
#   * On platforms using the 64-bit GCC ABI, we're not allowed to
#     generate non-PIC shared objects, and op.c requires the code
#     to be non-PIC. We apply the same trick as we developed for
#     64-bit windows.
#

#
# Copyright (C) 2006-2007 Sun Microsystems, Inc.
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
# Clara, CA 95054 USA or visit http://www.sun.com if you need
# additional information or have any questions.
#


SUB_DEPTH = ../..
include $(KBUILD_PATH)/subheader.kmk


REM_MOD              += VBoxREM
DLLS                 += VBoxREM
IMPORT_LIBS          += VBoxREMImp

DEFS                 += VBOX_WITH_NEW_RECOMPILER


OTHER_CLEAN          += \
	$(PATH_$(REM_MOD))/op.h \
	$(PATH_$(REM_MOD))/opc.h \
	$(PATH_$(REM_MOD))/gen-op.h \
	$(PATH_$(REM_MOD))/opc.h

#
# Globals
#
VBOX_PATH_RECOMPILER_SRC := $(PATH_SUB_CURRENT)
TEMPLATE_DUMMY = dummy template (move to kBuild)

#
# L4 must use the no-crt path because it's lacking math stuff it seems...
# Darwin must use the non-crt path because it can't compile op.c nativly.
# All the AMD64 target must use the no-crt path because ELF doesn't like op.c
# when stuffed into a shared library and windows doesn't have 64-bit gcc (yet).
#
ifeq ($(filter-out l4 darwin freebsd,$(KBUILD_TARGET)),)
 REM_USE_NOCRT := 1
endif
ifeq ($(REM_MOD),VBoxREM2)
 REM_USE_NOCRT := 1
endif

#
# The VBoxREM.[dll|so|..] or VBoxREM2.rel.
#
$(REM_MOD)_DEFS             = IN_REM_R3 REM_INCLUDE_CPU_H
$(REM_MOD)_DEFS            += REM_PHYS_ADDR_IN_TLB
#$(REM_MOD)_DEFS          += DEBUG_ALL_LOGGING DEBUG_DISAS DEBUG_PCALL DEBUG_EXEC DEBUG_FLUSH DEBUG_IOPORT DEBUG_SIGNAL DEBUG_TLB_CHECK DEBUG_TB_INVALIDATE DEBUG_TLB  # Enables huge amounts of debug logging.

$(REM_MOD)_INCS             = 	  \
	Sun 			  \
	Sun/crt			  \
	target-i386 		  \
	tcg                       \
	fpu 			  \
	$(PATH_$(REM_MOD)) 	  \
	$(PATH_ROOT)/src/VBox/VMM \
	.

$(REM_MOD)_SOURCES          = 	\
	VBoxRecompiler.c 	\
	cpu-exec.c 		\
	exec.c 			\
	translate-all.c 	\
	host-utils.c            \
	tcg/tcg.c               \
        tcg/tcg-dyngen.c        \
	tcg/tcg-runtime.c       \
	fpu/softfloat-native.c  \
	target-i386/op_helper.c \
	target-i386/helper.c 	\
	target-i386/helper2.c 	\
	target-i386/translate.c

ifeq ($(KBUILD_TARGET_ARCH),amd64)
 $(REM_MOD)_INCS             +=  tcg/x86_64
 $(REM_MOD)_SOURCES          +=  tcg/x86_64/tcg-target.c
else
 $(REM_MOD)_INCS             +=  tcg/i386
 $(REM_MOD)_SOURCES          +=  tcg/i386/tcg-target.c
endif


$(REM_MOD)_SOURCES.debug = \
	Sun/testmath.c
$(REM_MOD)_SOURCES.win.x86  = $(REM_MOD).def
ifneq ($(REM_MOD),VBoxREM2)
 $(REM_MOD)_POST_CMDS       = $(VBOX_SIGN_IMAGE_CMDS)
endif


ifdef REM_USE_NOCRT
 $(REM_MOD)_TEMPLATE        = VBOXNOCRTGAS
 $(REM_MOD)_DEFS           += LOG_USE_C99 $(ARCH_BITS_DEFS)
 $(REM_MOD)_CFLAGS.amd64    = -O2
 $(REM_MOD)_CFLAGS.debug    = -O0
 ifdef ($(KBUILD_TARGET_ARCH),x86)
  $(REM_MOD)_CFLAGS.release+= -fomit-frame-pointer -fno-gcse
 endif

 # This doesn't fit in IPRT because it requires GAS and is LGPL.
 $(REM_MOD)_SOURCES        += \
	Sun/e_powl-$(KBUILD_TARGET_ARCH).S

 ifeq ($(REM_MOD),VBoxREM)
  $(REM_MOD)_LIBS           = \
	$(PATH_LIB)/RuntimeR3NoCRTGCC$(VBOX_SUFF_LIB) \
 	$(LIB_VMM) \
 	$(LIB_RUNTIME)
  ifeq ($(KBUILD_TARGET),l4)
   $(REM_MOD)_LIBS          += \
	$(L4_LIBDIR)/libuc.0.s.so
  endif
  $(REM_MOD)_LIBS.darwin    = \
  	$(TARGET_VBoxREMImp)
  $(REM_MOD)_LDFLAGS.darwin  = -read_only_relocs suppress -multiply_defined warning # -install_name $(VBOX_DYLD_EXECUTABLE_PATH)/$(REM_MOD).dylib
  $(REM_MOD)_POST_CMDS.darwin = install_name_tool -id $(VBOX_DYLD_EXECUTABLE_PATH)/$(REM_MOD).dylib $(out)
  $(REM_MOD)_CFLAGS.darwin   = -fno-common -mdynamic-no-pic
 else
  $(REM_MOD)_LIBS           = \
	$(PATH_LIB)/RuntimeR3NoCRTGCC$(VBOX_SUFF_LIB)
  $(REM_MOD)_SYSSUFF        = .rel
  $(REM_MOD)_LDFLAGS.darwin = -nostdlib -static
  $(REM_MOD)_CFLAGS.darwin  = -fno-common -static -mno-dynamic-no-pic
 endif

else # !REM_USE_NOCRT

 $(REM_MOD)_TOOL            = GXX3
 $(REM_MOD)_TOOL.solaris    = GXX3PLAIN
 $(REM_MOD)_TOOL.win.x86    = MINGW32
 $(REM_MOD)_TOOL.win.amd64  = XGCCAMD64LINUX
 $(REM_MOD)_TEMPLATE        = DUMMY
 $(REM_MOD)_SDKS.win.x86    = W32API  							## @todo do we really need this now?
 $(REM_MOD)_ASFLAGS         = -x assembler-with-cpp 			## @todo didn't I make this default already?
 $(REM_MOD)_CFLAGS          = -Wall -g
 $(REM_MOD)_CFLAGS.debug    = -O0
 $(REM_MOD)_CFLAGS.release += -fomit-frame-pointer -fno-gcse
 $(REM_MOD)_CFLAGS.profile  = $($(REM_MOD)_CFLAGS.release)
 $(REM_MOD)_CFLAGS.kprofile = $($(REM_MOD)_CFLAGS.release)
 $(REM_MOD)_CFLAGS.l4       = -nostdinc
 ifeq ($(KBUILD_TARGET),l4)
  $(REM_MOD)_INCS          += $(VBOX_L4_GCC3_INCS) $(L4_INCDIR)
 endif

 $(REM_MOD)_DEFS           += IN_RING3 LOG_USE_C99 $(ARCH_BITS_DEFS)
 #$(REM_MOD)_DEFS          += DEBUG_DISAS DEBUG_PCALL DEBUG_EXEC DEBUG_FLUSH DEBUG_IOPORT DEBUG_SIGNAL DEBUG_TLB_CHECK DEBUG_TB_INVALIDATE DEBUG_TLB  # Enables huge amounts of debug logging.
 # these defines are probably all irrelevant now:
 $(REM_MOD)_DEFS           += _GNU_SOURCE _FILE_OFFSET_BITS=64 _LARGEFILE_SOURCE _REENTRANT

 $(REM_MOD)_LDFLAGS.darwin  = -read_only_relocs suppress -install_name $(VBOX_DYLD_EXECUTABLE_PATH)/$(REM_MOD).dylib -multiple_defined warning
 $(REM_MOD)_LDFLAGS.l4      = -T$(L4_LIBDIR)/../main_rel.ld -nostdlib -Wl,--no-undefined
 $(REM_MOD)_LDFLAGS.linux   = $(VBOX_LD_as_needed)
 $(REM_MOD)_LDFLAGS.os2     = -Zomf
 $(REM_MOD)_LDFLAGS.debug   = -g
 $(REM_MOD)_LDFLAGS.solaris = -mimpure-text
 ifdef VBOX_SOLARIS_10
  $(REM_MOD)_DEFS.solaris    += HOST_SOLARIS=10
 else # solaris 11
  $(REM_MOD)_DEFS.solaris    += HOST_SOLARIS=11
 endif
 ifeq ($(KBUILD_TARGET_ARCH),amd64)
  $(REM_MOD)_LIBS           = $(FILE_TOOL_GCC3_LIBGCC)
 else # x86
  $(REM_MOD)_LIBS           = \
 	$(LIB_VMM) \
 	$(LIB_RUNTIME)
  $(REM_MOD)_LIBS.win.x86   = \
 	mingw32 \
 	user32 gdi32 winmm ws2_32 iphlpapi dxguid
  $(REM_MOD)_LIBS.linux     = \
 	$(LIB_UUID) \
 	m \
 	util \
 	rt \
 	$(LIB_PTHREAD)
  $(REM_MOD)_LIBS.l4        = \
 	gcc \
 	$(L4_LIBDIR)/libvboxserver.s.so \
 	$(L4_LIBDIR)/libdl.s.so \
 	$(L4_LIBDIR)/libuc.0.s.so
 endif # x86

endif # !REM_USE_NOCRT

# Extra flags for these source modules.
target-i386/helper.c_CFLAGS.x86 = -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-gcse
cpu-exec.c_CFLAGS.x86           = -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-gcse
cpu-exec.c_CFLAGS.solaris.amd64 = -O2 -fomit-frame-pointer -fno-strict-aliasing


# transitional rule
$(PATH_$(REM_MOD))/op.h:
	$(APPEND)    $@ ''

#
# The math testcase as a standalone program for testing and debugging purposes.
#
## @todo This is a bit messy because of MINGW32.
#BLDPROGS += testmath
testmath_TOOL           = GXX3
testmath_TOOL.win.x86   = MINGW32
testmath_SDKS.win.x86   = W32API
ifeq ($(KBUILD_HOST).$(KBUILD_HOST_ARCH),win.amd64)
 # 64-bit windows: Pretend to be 32-bit.
 testmath_BLD_TRG       = win32
 testmath_BLD_TRG_ARCH  = x86
 testmath_BLD_TRG_CPU   = i386
endif
testmath_ASTOOL         = $(VBOX_ASTOOL)
ifeq ($(filter-out win32 win64,$(KBUILD_HOST)),)
 testmath_ASFLAGS        = -f win32 -DNASM_FORMAT_PE $(VBOX_ASFLAGS) -w+orphan-labels
else
 testmath_ASFLAGS        = -f elf -DNASM_FORMAT_ELF $(VBOX_ASFLAGS) -w+orphan-labels
endif
testmath_ASFLAGS.amd64  = -m amd64
testmath_CFLAGS         = -Wall -g
testmath_CFLAGS.release = -O3
testmath_LDFLAGS        = -g
testmath_DEFS           = MATHTEST_STANDALONE
testmath_SOURCES        = Sun/testmath.c
#testmath_SOURCES        += $(PATH_LIB)/RuntimeR3NoCRTGCC$(VBOX_SUFF_LIB)


ifeq ($(REM_MOD),VBoxREM2)
#
# The VBoxREM2 wrapper.
#
VBoxREM_TEMPLATE       = VBOXR3
VBoxREM_DEFS           = IN_REM_R3
VBoxREM_SOURCES        = \
	VBoxREMWrapper.cpp \
	VBoxREMWrapperA.asm
VBoxREM_LDFLAGS.darwin = -install_name $(VBOX_DYLD_EXECUTABLE_PATH)/VBoxREM.dylib
VBoxREM_LIBS           = \
	$(LIB_VMM) \
	$(LIB_RUNTIME)
endif


#
# The VBoxREM import library.
#
VBoxREMImp_TEMPLATE         = VBOXR3
ifeq ($(KBUILD_TARGET),darwin)
VBoxREMImp_INST             = $(INST_LIB)
endif
VBoxREMImp_SOURCES.win      = VBoxREM.def
VBoxREMImp_SOURCES.os2      = $(PATH_VBoxREMImp)/VBoxREMOS2.def
ifeq ($(filter win os2,$(KBUILD_TARGET)),)
VBoxREMImp_SOURCES          = $(PATH_VBoxREMImp)/VBoxREMImp.c
VBoxREMImp_CLEAN            = $(PATH_VBoxREMImp)/VBoxREMImp.c
endif
ifneq ($(filter-out darwin os2 win,$(KBUILD_TARGET)),)
VBoxREMImp_SONAME           = VBoxREM$(SUFF_DLL)
endif
VBoxREMImp_LDFLAGS.darwin   = -install_name $(VBOX_DYLD_EXECUTABLE_PATH)/VBoxREM.dylib
VBoxREMImp_LDFLAGS.l4       = -T$(L4_LIBDIR)/../main_rel.ld -nostdlib

$$(PATH_VBoxREMImp)/VBoxREMImp.c: $(VBOX_PATH_RECOMPILER_SRC)/VBoxREM.def $(VBOX_PATH_RECOMPILER_SRC)/Sun/deftoimp.sed $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_GENERATE,,$@)
	$(QUIET)$(APPEND) -t $@ '#ifdef VBOX_HAVE_VISIBILITY_HIDDEN'
	$(QUIET)$(APPEND)    $@ '# define EXPORT __attribute__((visibility("default")))'
	$(QUIET)$(APPEND)    $@ '#else'
	$(QUIET)$(APPEND)    $@ '# define EXPORT'
	$(QUIET)$(APPEND)    $@ '#endif'
	$(QUIET)$(APPEND)    $@ ''
	$(QUIET)$(SED) -f $(VBOX_PATH_RECOMPILER_SRC)/Sun/deftoimp.sed --append $@ $<

$$(PATH_VBoxREMImp)/VBoxREMOS2.def: $(VBOX_PATH_RECOMPILER_SRC)/VBoxREM.def $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(SED) \
		-e 's/^[ \t][ \t]*REMR3/    _REMR3/' \
		-e 's/\.[Dd][Ll][Ll]//' \
		-e 's/^LIBRARY .*/LIBRARY VBoxREM INITINSTANCE TERMINSTANCE\nDATA MULTIPLE\n/' \
		--output $@ \
		$<

include $(KBUILD_PATH)/subfooter.kmk

importlib: $(LIB_REM)
