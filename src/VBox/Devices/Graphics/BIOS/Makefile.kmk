# $Id$
## @file
# VGA BIOS Sub-Makefile
#

#
#  Copyright (C) 2006-2007 innotek GmbH
# 
#  This file is part of VirtualBox Open Source Edition (OSE), as
#  available from http://www.virtualbox.org. This file is free software;
#  you can redistribute it and/or modify it under the terms of the GNU
#  General Public License as published by the Free Software Foundation,
#  in version 2 as it comes in the "COPYING" file of the VirtualBox OSE
#  distribution. VirtualBox OSE is distributed in the hope that it will
#  be useful, but WITHOUT ANY WARRANTY of any kind.

DEPTH ?= ../../../../..
SUB_DEPTH = ../..
include	$(PATH_KBUILD)/subheader.kmk

VBOX_PATH_DEVICES_SRC = $(PATH_SUB_ROOT)

#
# Build program for calculating the VGA BIOS checksums.
#
BLDPROGS += vgabiossums vbetables-gen
vgabiossums_TEMPLATE   = VBOXBLDPROG
vgabiossums_SOURCES    = biossums.c
vbetables-gen_TEMPLATE = VBOXBLDPROG
vbetables-gen_SOURCES  = vbetables-gen.c

#
# The library containing the VGA BIOS image.
#
LIBRARIES += VgaBiosBin
VgaBiosBin_TEMPLATE = VBOXR3
VgaBiosBin_DEFS     = IN_VBOXDD2
VgaBiosBin_INCS     = $(VBOX_PATH_DEVICES_SRC)
VgaBiosBin_SOURCES  = $(PATH_TARGET)/VgaBiosBin.c
VgaBiosBin_CLEAN    = \
	$(PATH_TARGET)/_vgabios_.c \
	$(PATH_TARGET)/vgabios0.s \
	$(PATH_TARGET)/vgabios1.s \
	$(PATH_TARGET)/vgabios.tmp \
	$(PATH_TARGET)/vgabios.lst \
	$(PATH_TARGET)/vgabios.bin \
	$(PATH_TARGET)/VgaBiosBin.c \
	\
	$(PATH_TARGET)/_vgabios-cirrus_.c \
	$(PATH_TARGET)/vgabios-cirrus0.s \
	$(PATH_TARGET)/vgabios-cirrus1.s \
	$(PATH_TARGET)/vgabios-cirrus.tmp \
	$(PATH_TARGET)/vgabios-cirrus.lst \
	$(PATH_TARGET)/vgabios-cirrus.bin

#
# Rule for making the bios.
#
$(PATH_TARGET)/VgaBiosBin.c: $(PATH_TARGET)/vgabios.bin $(VBOX_BIN2C)
	$(call MSG_TOOL,bin2c,VgaBiosBin,$<,$@)
	$(QUIET)$(VBOX_BIN2C) -min 32 -max 64 -mask 0x0fff -ascii -export VgaBiosBinary $< $@

#
# vgabios
#

# 1. create vbetables.h
$(PATH_TARGET)/vbetables.h: $(MAKEFILE_CURRENT)
ifdef KMK_USE_REDIRECT
	$(QUIET)$(REDIRECT) -wo $@ -- $(TARGET_vbetables-gen)
else
	$(QUIET)$(TARGET_vbetables-gen) > $@
endif

# 2. precompile
$(PATH_TARGET)/_vgabios_.c: $(addprefix $(PATH_SUB_CURRENT)/,vgabios.c vgabios.h vbe.h vgatables.h vgafonts.h vbe.c clext.c) $(PATH_TARGET)/vbetables.h
	$(call MSG_TOOL,cpp,VgaBiosBin,$<,$@)
ifdef KMK_USE_REDIRECT
	$(QUIET)$(TOOL_$(VBOX_GCC_TOOL)_CC) -E -P -DVBOX -DVBOX_VERSION_STRING=\"$(VBOX_VERSION_STRING)\" -DVBE -DVGABIOS_DATE="''" $(addprefix -D,$(DEFS) $(DEFS.$(BUILD_TYPE))) -o $@ $<
else
	$(QUIET)$(TOOL_$(VBOX_GCC_TOOL)_CC) -DVBOX -DVBOX_VERSION_STRING=\"$(VBOX_VERSION_STRING)\" -E -P $< -DVBE -DVGABIOS_DATE="''" $(addprefix -D,$(DEFS) $(DEFS.$(BUILD_TYPE))) > $@
endif

# 3. compile - tempfile clashes, so make sure it's built in solitude.
.NOTPARALLEL: $(PATH_TARGET)/vgabios0.s
$(PATH_TARGET)/vgabios0.s: $(PATH_TARGET)/_vgabios_.c
	$(call MSG_COMPILE,VgaBiosBin,$<,$@,C)
	$(QUIET)$(VBOX_BCC) -o $@ -C-c -D__i86__ -0 -S $^

# 4. preprocess intermediate assembly.
$(PATH_TARGET)/vgabios1.s: $(PATH_TARGET)/vgabios0.s
	$(call MSG_TOOL,Adjusting BCC Assembly,VgaBiosBin,$<,$@)
ifdef KMK_NEW_SED
	$(QUIET)$(SED) -e 's/^\.text//' -e 's/^\.data//' --output $@ $^
else
	$(QUIET)$(SED) -e 's/^\.text//' -e 's/^\.data//' $^ > $@
endif

# 5. assemble
$(PATH_TARGET)/vgabios.tmp $(PATH_TARGET)/vgabios.lst: $(PATH_TARGET)/vgabios1.s
	$(call MSG_COMPILE,VgaBiosBin,$<,$@,AS)
ifdef KMK_USE_REDIRECT
	$(QUIET)$(REDIRECT) -ri $^ -- $(VBOX_AS86) -b $(PATH_TARGET)/vgabios.tmp -u- -w- -g -0 -j -O -l $(PATH_TARGET)/vgabios.lst
else
	$(QUIET)$(VBOX_AS86) -b $(PATH_TARGET)/vgabios.tmp -u- -w- -g -0 -j -O -l $(PATH_TARGET)/vgabios.lst < $^
endif

# 6. checksums
$(PATH_TARGET)/vgabios.bin: $(PATH_TARGET)/vgabios.tmp $$(TARGET_vgabiossums)
	$(call MSG_TOOL,vgabiossums,VgaBiosBin,$<,$@)
	$(QUIET)$(CP) -f $(PATH_TARGET)/vgabios.tmp $@
	$(QUIET)$(TARGET_vgabiossums) $@


include	$(PATH_KBUILD)/subfooter.kmk

