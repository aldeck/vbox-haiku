# $Id$
## @file
# Sub-Makefile for the support library and the drivers/modules/kexts it uses.
#

#
# Copyright (C) 2006 InnoTek Systemberatung GmbH
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation,
# in version 2 as it comes in the "COPYING" file of the VirtualBox OSE
# distribution. VirtualBox OSE is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY of any kind.
#
# If you received this file as part of a commercial VirtualBox
# distribution, then only the terms of your commercial VirtualBox
# license agreement apply instead of the previous paragraph.
#

DEPTH ?= ../../../..
SUB_DEPTH = ..
include	$(PATH_KBUILD)/subheader.kmk

#
# Targets
#
LIBRARIES += SUPR3
ifneq ($(filter-out darwin,$(BUILD_TARGET)),)
LIBRARIES += SUPR0
endif
ifdef VBOX_WITH_VBOXDRV
SYSMODS.darwin += VBoxDrv
SYSMODS.linux  += vboxdrv
SYSMODS.win    += VBoxDrv
SYSMODS.os2    += VBoxDrv
endif

INSTALLS.linux = vboxmod-bin vboxmod-sh

#
# Include sub-makefile(s).
#
include $(PATH_SUB_CURRENT)/testcase/Makefile.kmk


vboxmod-bin_INST    = bin/src/
vboxmod-bin_MODE    = a+r,u+w
vboxmod-bin_SOURCES = \
	$(PATH_ROOT)/include/iprt/alloc.h=>include/iprt/alloc.h \
	$(PATH_ROOT)/include/iprt/asm.h=>include/iprt/asm.h \
	$(PATH_ROOT)/include/iprt/assert.h=>include/iprt/assert.h \
	$(PATH_ROOT)/include/iprt/cdefs.h=>include/iprt/cdefs.h \
	$(PATH_ROOT)/include/iprt/err.h=>include/iprt/err.h \
	$(PATH_ROOT)/include/iprt/heap.h=>include/iprt/heap.h \
	$(PATH_ROOT)/include/iprt/initterm.h=>include/iprt/initterm.h \
	$(PATH_ROOT)/include/iprt/log.h=>include/iprt/log.h \
	$(PATH_ROOT)/include/iprt/mem.h=>include/iprt/mem.h \
	$(PATH_ROOT)/include/iprt/param.h=>include/iprt/param.h \
	$(PATH_ROOT)/include/iprt/process.h=>include/iprt/process.h \
	$(PATH_ROOT)/include/iprt/semaphore.h=>include/iprt/semaphore.h \
	$(PATH_ROOT)/include/iprt/spinlock.h=>include/iprt/spinlock.h \
	$(PATH_ROOT)/include/iprt/stdarg.h=>include/iprt/stdarg.h \
	$(PATH_ROOT)/include/iprt/stdint.h=>include/iprt/stdint.h \
	$(PATH_ROOT)/include/iprt/string.h=>include/iprt/string.h \
	$(PATH_ROOT)/include/iprt/thread.h=>include/iprt/thread.h \
	$(PATH_ROOT)/include/iprt/types.h=>include/iprt/types.h \
	$(PATH_ROOT)/include/iprt/avl.h=>include/iprt/avl.h \
	$(PATH_ROOT)/include/VBox/cdefs.h=>include/VBox/cdefs.h \
	$(PATH_ROOT)/include/VBox/log.h=>include/VBox/log.h \
	$(PATH_ROOT)/include/VBox/sup.h=>include/VBox/sup.h \
	$(PATH_ROOT)/include/VBox/types.h=>include/VBox/types.h \
	$(PATH_ROOT)/src/VBox/Runtime/include/internal/initterm.h=>include/internal/initterm.h \
	$(PATH_ROOT)/src/VBox/Runtime/include/internal/thread.h=>include/internal/thread.h \
	$(PATH_ROOT)/src/VBox/Runtime/include/internal/magics.h=>include/internal/magics.h \
	linux/SUPDrv-linux.c=>linux/SUPDrv-linux.c \
	linux/Makefile=>Makefile \
	$(PATH_ROOT)/src/VBox/Runtime/alloc/heapsimple.cpp=>alloc/heapsimple.c \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/alloc-r0drv.cpp=>r0drv/alloc-r0drv.c \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/alloc-r0drv.h=>r0drv/alloc-r0drv.h \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/initterm-r0drv.cpp=>r0drv/initterm-r0drv.c \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c=>r0drv/linux/alloc-r0drv-linux.c \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/linux/initterm-r0drv-linux.c=>r0drv/linux/initterm-r0drv-linux.c \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/linux/process-r0drv-linux.c=>r0drv/linux/process-r0drv-linux.c \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/linux/semaphore-r0drv-linux.c=>r0drv/linux/semaphore-r0drv-linux.c \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/linux/spinlock-r0drv-linux.c=>r0drv/linux/spinlock-r0drv-linux.c \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/linux/string.h=>r0drv/linux/string.h \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/linux/thread-r0drv-linux.c=>r0drv/linux/thread-r0drv-linux.c \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/linux/the-linux-kernel.h=>r0drv/linux/the-linux-kernel.h \
	$(PATH_OUT)/version-generated.h=>version-generated.h \
	SUPDRV.h=>SUPDRV.h \
	SUPDRVIOC.h=>SUPDRVIOC.h \
	SUPDRVShared.c=>SUPDRVShared.c

vboxmod-sh_INST     = bin/src
vboxmod-sh_MODE     = a+rx,u+w
vboxmod-sh_SOURCES  = \
	linux/build_in_tmp=>build_in_tmp

#
# The Ring-3 Support Library (this is linked into the IPRT dll, VBoxRT).
#
ifneq ($(filter l4%,$(BUILD_TARGET) $(BUILD_TARGET_SUB)),)
# L4 has trouble with -pedantic. It also make trouble when inlining is not enabled.
SUPR3_TEMPLATE      = VBOXR3NP
else
SUPR3_TEMPLATE      = VBOXR3
endif
SUPR3_DEFS          = IN_SUP_R3 IN_RT_R3
SUPR3_INCS         := $(PATH_SUB_CURRENT)
SUPR3_INCS.l4       = $(L4_INCDIR)
ifneq ($(BUILD_TARGET),win) ## @todo rename win32 -> win!
SUPR3_SOURCES       = \
	SUPLib.cpp \
	$(BUILD_TARGET)/SUPLib-$(BUILD_TARGET).cpp
else
SUPR3_SOURCES       = \
	SUPLib.cpp \
	win32/SUPLib-win32.cpp
endif

#
# SUPR0 - The Ring-0 Import / Thunk library.
#
SUPR0_TEMPLATE      = VBOXR0
ifeq ($(VBOX_LDR_FMT),pe)
SUPR0_SOURCES       += SUPR0.def
endif
ifeq ($(VBOX_LDR_FMT),lx)
SUPR0_SOURCES       += $(PATH_TARGET)/SUPR0.def
$(PATH_TARGET)/SUPR0.def: $(PATH_SUB_CURRENT)/SUPR0.def | $(call DIRDEP,$(PATH_TARGET))
	$(SED) -e 's/^[ \t][ \t]*\([gA-Z]\)/    _\1/' -e 's/[ \t]DATA[ \t]*/ /' $< > $@.tmp
	$(MV) -f $@.tmp $@
endif


#
# VBoxDrv.sys - The Windows driver.
#
ifeq ($(BUILD_TARGET),win)
VBoxDrv_TEMPLATE      = VBOXR0DRV
VBoxDrv_DEFS          = IN_RT_R0 IN_SUP_R0
VBoxDrv_SDKS          = W2K3DDK WINPSDKINCS
VBoxDrv_INCS         := $(PATH_SUB_CURRENT)
VBoxDrv_SOURCES       = \
	SUPDRVShared.c
VBoxDrv_SOURCES.x86   = \
	win32/SUPDrv-win32.cpp \
	win32/SUPDrvA-win32.asm
VBoxDrv_SOURCES.amd64 = \
	win64/SUPDrv-win64.cpp \
	win64/SUPDrvA-win64.asm
VBoxDrv_LDFLAGS.x86   = -Entry:DriverEntry@8
VBoxDrv_LDFLAGS.amd64 = -Entry:DriverEntry
VBoxDrv_LIBS          = \
	$(PATH_SDK_W2K3DDK_LIB)/ntoskrnl.lib \
	$(PATH_SDK_W2K3DDK_LIB)/hal.lib \
	$(PATH_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB)
endif


#
# vboxdrv.ko - The Linux Kernel Module.
#
ifeq ($(BUILD_TARGET),linux)
vboxdrv_TEMPLATE      = VBOXR0DRV
vboxdrv_DEFS          = KBUILD_MODNAME=KBUILD_STR\(vboxdrv\) KBUILD_BASENAME=KBUILD_STR\(vboxdrv\) MODULE IN_RT_R0 IN_SUP_R0 CONFIG_VBOXDRV_AS_MISC
vboxdrv_INCS         := $(PATH_SUB_CURRENT)
vboxdrv_LIBS          = $(PATH_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB)
vboxdrv_LIBS.debug    = $(vboxdrv_LIBS) $(VBOX_GCC_LIBGCC)
vboxdrv_SOURCES       = \
	$(BUILD_TARGET)/SUPDrv-$(BUILD_TARGET).c \
	SUPDRVShared.c
ifndef VBOX_LINUX_VERSION_2_4
vboxdrv_SOURCES      += \
	$(BUILD_TARGET)/SUPDrv-$(BUILD_TARGET).mod.c
endif
endif # real linux


#
# VBoxDrv.kext - The Darwin Kernel Extension.
#
ifeq ($(BUILD_TARGET),darwin)
VBoxDrv_TEMPLATE      = VBOXR0DRV
VBoxDrv_DEFS          = IN_RT_R0 IN_SUP_R0 USE_NEW_OS_INTERFACE
VBoxDrv_DEFS         += DEBUG_DARWIN_GIP
VBoxDrv_INCS         := $(PATH_SUB_CURRENT)
VBoxDrv_LIBS          = $(PATH_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB)
VBoxDrv_LDFLAGS       = -v -Wl,-whyload -Wl,-v -Wl,-whatsloaded
VBoxDrv_INST          = $(INST_VBOXDRV)Contents/MacOS/
VBoxDrv_SOURCES       = \
	SUPDRVShared.c \
	$(BUILD_TARGET)/SUPDrv-$(BUILD_TARGET).cpp

INSTALLS += VBoxDrv.kext
VBoxDrv.kext_INST     = $(INST_VBOXDRV)Contents/
VBoxDrv.kext_SOURCES  = \
	$(PATH_TARGET)/Info.plist

$(PATH_TARGET)/Info.plist: $(PATH_SUB_CURRENT)/darwin/Info.plist $(VBOX_VERSION_MK) | $(call DIRDEP,$(PATH_TARGET))
	$(call MSG_GENERATE,VBoxDrv,$@,$<)
	$(xQUIET)$(RM) -f $@
	$(xQUIET)$(SED) \
		-e 's/@VBOX_VERSION_STRING@/$(VBOX_VERSION_STRING)/g' \
		-e 's/@VBOX_VERSION_MAJOR@/$(VBOX_VERSION_MAJOR)/g' \
		-e 's/@VBOX_VERSION_MINOR@/$(VBOX_VERSION_MINOR)/g' \
		-e 's/@VBOX_VERSION_BUILD@/$(VBOX_VERSION_BUILD)/g' \
		$< > $@

INSTALLS += Scripts
Scripts_INST     = $(INST_DIST)
Scripts_SOURCES  = \
	darwin/load.sh

endif


#
# VBoxDrv.sys - The OS/2 driver.
#
ifeq ($(BUILD_TARGET),os2)
VBoxDrv_TEMPLATE      = VBOXR0DRV
VBoxDrv_DEFS          = IN_RT_R0 IN_SUP_R0 USE_NEW_OS_INTERFACE
VBoxDrv_INCS         := $(PATH_SUB_CURRENT)
#VBoxDrv_LDFLAGS       = -s -t -v
VBoxDrv_SOURCES       = \
	os2/SUPDrvA-os2.asm \
	os2/SUPDrv-os2.def
VBoxDrv_LIBS          = \
	$(TARGET_VBoxDrvLib) \
	$(PATH_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB) \
	$(VBOX_GCC_LIBGCC) \
	end

# temp hack to ensure that SUPDrvA-os2.asm is first in the link.
LIBRARIES += VBoxDrvLib
VBoxDrvLib_TEMPLATE   = VBOXR0DRV
VBoxDrvLib_NOINST     = 1
VBoxDrvLib_DEFS       = IN_RT_R0 IN_SUP_R0 USE_NEW_OS_INTERFACE
VBoxDrvLib_INCS      := \
	$(PATH_SUB_CURRENT) \
	$(PATH_TARGET) \
	$(PATH_ROOT)/src/VBox/Runtime/include
VBoxDrvLib_SOURCES    = \
	os2/SUPDrv-os2.cpp \
	SUPDRVShared.c
endif

# symlinked??

include	$(PATH_KBUILD)/subfooter.kmk
