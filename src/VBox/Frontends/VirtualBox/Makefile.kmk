# $Id$
## @file
# Makefile for the VirtualBox Qt GUI.
#

#
# Copyright (C) 2006-2010 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk

#
# Globals.
#
VBOX_VIRTUALBOX4_SRC := $(PATH_SUB_CURRENT)
VBOX_VIRTUALBOX4_OUT_DIR := $(PATH_TARGET)/VirtualBox/misc

# VBOX_WITH_REGISTRATION := 1

# Ask the user to register at Sun. If this setting is disabled the user can
# still register using the menu if desired.
# VBOX_WITH_REGISTRATION_REQUEST := 1

# For now this should be disabled in any case
ifdef VBOX_WITH_REGISTRATION
 VBOX_WITH_REGISTRATION=
endif
ifdef VBOX_WITH_REGISTRATION_REQUEST
 VBOX_WITH_REGISTRATION_REQUEST=
endif

# Show the update notifier dialog during startup. If this setting is disabled
# the user can still update using the menu if desired.
ifndef VBOX_OSE
VBOX_WITH_UPDATE_REQUEST := 1
endif

#
# The targets.
#
ifdef VBOX_WITH_HARDENING
PROGRAMS += VirtualBoxHardened
DLLS += VirtualBox
else
PROGRAMS += VirtualBox
endif

INSTALLS += VirtualBox.nls


#
# Include the language lists.
#
include $(PATH_SUB_CURRENT)/nls/ApprovedLanguages.kmk


#
# Hardened VirtualBox.
#
VirtualBoxHardened_TEMPLATE = VBOXR3HARDENEDEXE
VirtualBoxHardened_SOURCES = src/hardenedmain.cpp
VirtualBoxHardened_NAME = VirtualBox
VirtualBoxHardened_INST.darwin = $(INST_BIN)VirtualBox $(INST_BIN)VirtualBoxVM


#
# Include Qt project file, we'll use FORMS and TRANSLATIONS in
# the VirtualBox setup below.
#
SAVED_TEMPLATE := $(TEMPLATE)
include $(PATH_SUB_CURRENT)/VBoxUI.pro


#
# VirtualBox - The GUI program.
#
USES += qt4
VirtualBox_TEMPLATE := $(if $(VBOX_WITH_HARDENING),VBOXQT4GUI,VBOXQT4GUIEXE)
VirtualBox_NAME = VirtualBox
ifndef VBOX_WITH_HARDENING      # For the launch trick we need different inode numbers.
 VirtualBox_INST.darwin = $(INST_BIN)VirtualBox $(INST_BIN)VirtualBoxVM
endif
VirtualBox_SDKS.win = WINPSDK DXSDK
if1of ($(KBUILD_TARGET), freebsd linux netbsd openbsd os2) # X11 + os2 ## @todo solaris
 VirtualBox_SDKS += LIBSDL
endif

ifdef VBOX_WITH_ICHAT_THEATER
 # For testing iChat Theater stuff change the sdk path (HACK ALERT!)
 VBOX_PATH_MACOSX_SDK = /Developer/SDKs/MacOSX10.5.sdk
endif

VirtualBox_DEFS           =
VirtualBox_DEFS.debug     = VBOX_CHECK_STATE # QT_FATAL_ASSERT
VirtualBox_DEFS.darwin    = VBOX_GUI_USE_QUARTZ2D VBOX_GUI_USE_QIMAGE
ifndef VBOX_WITH_COCOA_QT
VirtualBox_DEFS.darwin.x86= USE_HID_FOR_MODIFIERS
endif
VirtualBox_DEFS.freebsd   = VBOX_GUI_USE_QIMAGE VBOX_GUI_USE_SDL
VirtualBox_DEFS.linux     = VBOX_GUI_USE_QIMAGE VBOX_GUI_USE_SDL
VirtualBox_DEFS.netbsd    = VBOX_GUI_USE_QIMAGE VBOX_GUI_USE_SDL
VirtualBox_DEFS.openbsd   = VBOX_GUI_USE_QIMAGE VBOX_GUI_USE_SDL
VirtualBox_DEFS.solaris   = VBOX_GUI_USE_QIMAGE #VBOX_GUI_USE_SDL
VirtualBox_DEFS.win       = VBOX_GUI_USE_QIMAGE UNICODE QT_DLL
ifdef VBOX_WITH_ICHAT_THEATER
 VirtualBox_DEFS.darwin += VBOX_WITH_ICHAT_THEATER
endif
ifneq ($(KBUILD_TYPE),release)
 # non-release builds has some extra features.
 VirtualBox_DEFS.win     += VBOX_GUI_USE_DDRAW
endif
VirtualBox_DEFS          += \
	$(if $(VBOX_WITH_REGISTRATION),VBOX_WITH_REGISTRATION) \
	$(if $(VBOX_WITH_REGISTRATION_REQUEST),VBOX_WITH_REGISTRATION_REQUEST) \
	$(if $(VBOX_WITH_UPDATE_REQUEST),VBOX_WITH_UPDATE_REQUEST) \
	$(if $(VBOX_WITH_ALSA),VBOX_WITH_ALSA) \
	$(if $(VBOX_WITH_PULSE),VBOX_WITH_PULSE) \
	$(if $(VBOX_WITH_SOLARIS_OSS),VBOX_WITH_SOLARIS_OSS) \
	$(if $(VBOX_WITH_E1000),VBOX_WITH_E1000) \
	$(if $(VBOX_WITH_NETFLT)$(eq $(KBUILD_TARGET),freebsd),VBOX_WITH_NETFLT) \
	$(if $(VBOX_WITH_VDE),VBOX_WITH_VDE)
ifdef VBOX_WITH_DEBUGGER_GUI
 VirtualBox_DEFS        += VBOX_WITH_DEBUGGER_GUI
 if "$(KBUILD_TYPE)" != "release"
  VirtualBox_DEFS       += VBOX_WITH_DEBUGGER_GUI_MENU
 endif
endif
ifdef VBOX_WITH_VIDEOHWACCEL
 VirtualBox_DEFS        += VBOX_WITH_VIDEOHWACCEL \
	VBOX_GUI_USE_QGL
else ifdef VBOX_GUI_USE_QGL
 VirtualBox_DEFS        += VBOX_GUI_USE_QGL
endif
ifdef VBOX_WITH_VIRTIO
 VirtualBox_DEFS        += VBOX_WITH_VIRTIO
endif
ifdef VBOXWDDM
 VirtualBox_DEFS        += VBOXWDDM
endif
ifdef VBOX_BLEEDING_EDGE
VirtualBox_src/VBoxSelectorWnd.cpp_DEFS += \
    VBOX_BLEEDING_EDGE=\"$(VBOX_BLEEDING_EDGE)\"
VirtualBox_src/runtime/UIMachineWindow.cpp_DEFS += \
    VBOX_BLEEDING_EDGE=\"$(VBOX_BLEEDING_EDGE)\"
VirtualBox_src/VBoxAboutDlg.cpp_DEFS += \
    VBOX_BLEEDING_EDGE=\"$(VBOX_BLEEDING_EDGE)\"
VirtualBox_src/main.cpp_DEFS += \
    VBOX_BLEEDING_EDGE=\"$(VBOX_BLEEDING_EDGE)\"
endif


VBOX_GUI_INC_DIRS = \
	./src \
	./src/globals \
	./src/extensions \
	./src/settings \
	./src/settings/global \
	./src/settings/vm \
	./src/wizards/newvm \
	./src/wizards/newhd \
	./src/wizards/firstrun \
	./src/wizards/exportappliance \
	./src/wizards/importappliance \
	./src/widgets \
	./src/X11 \
	./src/darwin \
    ./src/runtime \
	./src/runtime/normal \
	./src/runtime/fullscreen \
	./src/runtime/seamless

ifdef VBOX_WITH_REGISTRATION
 VBOX_GUI_INC_DIRS += \
	./src/wizards/registration
endif

VirtualBox_INCS = \
	$(VBOX_GUI_INC_DIRS) \
	$(PATH_VirtualBox)/include

# Necessary for the hdd backend enumeration
VirtualBox_LIBS = $(LIB_DDU)

# This library is required for multi-monitor support
VirtualBox_LIBS.linux += Xinerama
VirtualBox_LIBS.solaris += Xinerama
VirtualBox_LIBS.freebsd += Xinerama

ifdef VBOX_WITH_VIDEOHWACCEL
# Necessary for save state support
VirtualBox_LIBS += $(LIB_VMM)
endif
ifeq ($(KBUILD_TYPE),release)
 VirtualBox_LDFLAGS.win  += /SUBSYSTEM:windows
else
 VirtualBox_LDFLAGS.linux+= -rdynamic # for backtrace_symbols()
 ifeq ($(USERNAME),dmik)
  VirtualBox_LDFLAGS.win += /SUBSYSTEM:windows
 else
  VirtualBox_LDFLAGS.win += /SUBSYSTEM:console
 endif
endif

if defined(VBOX_WITH_VIDEOHWACCEL) || defined(VBOX_GUI_USE_QGL)
 VirtualBox_LDFLAGS.win += /DelayLoad:QtOpenGLVBox4.dll /DelayLoad:OPENGL32.dll
endif

VirtualBox_LDFLAGS.darwin = \
	-framework AppKit -framework Carbon \
	$(if $(VBOX_WITH_HARDENING),-install_name $(VBOX_DYLD_EXECUTABLE_PATH)/VirtualBox.dylib)
ifdef VBOX_WITH_ICHAT_THEATER
 VirtualBox_LDFLAGS.darwin += -framework InstantMessage -framework QuartzCore
endif
if defined(VBOX_WITH_VIDEOHWACCEL) || defined(VBOX_GUI_USE_QGL)
 VirtualBox_LDFLAGS.darwin += -framework OpenGL
endif

VirtualBox_LIBS.win       = \
	$(PATH_SDK_WINPSDK_LIB)/Htmlhelp.Lib \
	$(PATH_SDK_DXSDK_LIB)/ddraw.lib \
	$(PATH_SDK_DXSDK_LIB)/dxguid.lib
if1of ($(KBUILD_TARGET), freebsd linux netbsd openbsd solaris) # X11
 VirtualBox_LIBS         += $(PATH_DLL)/VBoxKeyboard$(VBOX_SUFF_DLL)
endif

if defined(VBOX_WITH_VIDEOHWACCEL) || defined(VBOX_GUI_USE_QGL)
 VirtualBox_LIBS.win     += $(PATH_SDK_WINPSDK_LIB)/Opengl32.lib
 VirtualBox_LIBS.solaris += GL
 VirtualBox_LIBS.linux   += GL
endif

# Headers containing definitions of classes that use the Q_OBJECT macro.
VirtualBox_QT_MOCHDRS = \
	src/VBoxAboutDlg.h \
	src/VBoxCloseVMDlg.h \
	src/VBoxGlobalSettings.h \
	src/VBoxMediaManagerDlg.h \
	src/VBoxSelectorWnd.h \
	src/VBoxSnapshotDetailsDlg.h \
	src/VBoxSnapshotsWgt.h \
	src/VBoxTakeSnapshotDlg.h \
	src/VBoxUpdateDlg.h \
	src/VBoxVMInformationDlg.h \
	src/VBoxVMListView.h \
	src/VBoxVMLogViewer.h \
	src/globals/VBoxGlobal.h \
	src/globals/VBoxProblemReporter.h \
	src/globals/VBoxUtils.h \
	src/extensions/QIAdvancedSlider.h \
	src/extensions/QIArrowButtonPress.h \
	src/extensions/QIArrowButtonSwitch.h \
	src/extensions/QIArrowSplitter.h \
	src/extensions/QIDialog.h \
	src/extensions/QIFileDialog.h \
	src/extensions/QIHotKeyEdit.h \
	src/extensions/QIHttp.h \
	src/extensions/QILabel.h \
	src/extensions/QILabelSeparator.h \
	src/extensions/QIListView.h \
	src/extensions/QIMainDialog.h \
	src/extensions/QIMessageBox.h \
	src/extensions/QIRichToolButton.h \
	src/extensions/QISplitter.h \
	src/extensions/QIStateIndicator.h \
	src/extensions/QIStatusBar.h \
	src/extensions/QIToolButton.h \
	src/extensions/QITreeView.h \
	src/extensions/QITreeWidget.h \
	src/extensions/QIWidgetValidator.h \
	src/extensions/QIWizard.h \
	src/settings/VBoxSettingsDialog.h \
	src/settings/VBoxSettingsDialogSpecific.h \
	src/settings/VBoxSettingsPage.h \
	src/settings/VBoxSettingsSelector.h \
	src/settings/global/VBoxGLSettingsGeneral.h \
	src/settings/global/VBoxGLSettingsInput.h \
	src/settings/global/VBoxGLSettingsUpdate.h \
	src/settings/global/VBoxGLSettingsLanguage.h \
	src/settings/global/VBoxGLSettingsNetwork.h \
	src/settings/global/VBoxGLSettingsNetworkDetails.h \
	src/settings/vm/VBoxVMSettingsGeneral.h \
	src/settings/vm/VBoxVMSettingsSystem.h \
	src/settings/vm/VBoxVMSettingsDisplay.h \
	src/settings/vm/VBoxVMSettingsHD.h \
	src/settings/vm/VBoxVMSettingsAudio.h \
	src/settings/vm/VBoxVMSettingsNetwork.h \
	src/settings/vm/VBoxVMSettingsSerial.h \
	src/settings/vm/VBoxVMSettingsParallel.h \
	src/settings/vm/VBoxVMSettingsUSB.h \
	src/settings/vm/VBoxVMSettingsUSBFilterDetails.h \
	src/settings/vm/VBoxVMSettingsSF.h \
	src/settings/vm/VBoxVMSettingsSFDetails.h \
	src/wizards/newvm/UINewVMWzd.h \
	src/wizards/newhd/UINewHDWzd.h \
	src/wizards/firstrun/UIFirstRunWzd.h \
	src/wizards/exportappliance/UIExportApplianceWzd.h \
	src/wizards/importappliance/UIImportApplianceWzd.h \
	src/widgets/VBoxApplianceEditorWgt.h \
	src/widgets/VBoxBootTable.h \
	src/widgets/UIDownloader.h \
	src/widgets/UIDownloaderAdditions.h \
	src/widgets/UIDownloaderUserManual.h \
	src/widgets/VBoxExportApplianceWgt.h \
	src/widgets/VBoxFilePathSelectorWidget.h \
	src/widgets/VBoxImportApplianceWgt.h \
	src/widgets/VBoxLineTextEdit.h \
	src/widgets/VBoxMediaComboBox.h \
	src/widgets/VBoxMiniToolBar.h \
	src/widgets/VBoxOSTypeSelectorButton.h \
	src/widgets/VBoxOSTypeSelectorWidget.h \
	src/widgets/VBoxProgressDialog.h \
	src/widgets/VBoxSpecialControls.h \
	src/widgets/VBoxWarningPane.h \
	src/runtime/UISession.h \
	src/runtime/UIActionsPool.h \
	src/runtime/UIIndicatorsPool.h \
	src/runtime/UIMachine.h \
	src/runtime/UIMachineLogic.h \
	src/runtime/UIMachineView.h \
	src/runtime/UIMultiScreenLayout.h \
	src/runtime/normal/UIMachineLogicNormal.h \
	src/runtime/normal/UIMachineWindowNormal.h \
	src/runtime/normal/UIMachineViewNormal.h \
	src/runtime/fullscreen/UIMachineLogicFullscreen.h \
	src/runtime/fullscreen/UIMachineWindowFullscreen.h \
	src/runtime/fullscreen/UIMachineViewFullscreen.h \
	src/runtime/seamless/UIMachineLogicSeamless.h \
	src/runtime/seamless/UIMachineWindowSeamless.h \
	src/runtime/seamless/UIMachineViewSeamless.h

ifdef VBOX_WITH_REGISTRATION
 VirtualBox_QT_MOCHDRS += \
	src/wizards/registration/UIRegistrationWzd.h
endif

# Sources containing local definitions of classes that use the Q_OBJECT macro.
VirtualBox_QT_MOCSRCS = \
	src/VBoxSelectorWnd.cpp \
	src/VBoxMediaManagerDlg.cpp \
	src/runtime/UIActionsPool.cpp \
	src/runtime/UIMachineMenuBar.cpp \
	src/runtime/UIIndicatorsPool.cpp \
	src/runtime/UIMachine.cpp \
	src/runtime/UIMachineLogic.cpp
ifdef VBOX_WITH_XPCOM
 VirtualBox_QT_MOCSRCS += \
	src/globals/COMDefs.cpp
endif
ifeq ($(KBUILD_TARGET),win)
VirtualBox_QT_MOCSRCS += \
	src/extensions/QIFileDialog.cpp
endif

ifdef VBOX_WITH_REGISTRATION
 VirtualBox_QT_MOCSRCS += \
	src/wizards/registration/UIRegistrationWzd.cpp
endif

VirtualBox_SOURCES = \
	src/main.cpp \
	src/VBoxAboutDlg.cpp \
	src/VBoxCloseVMDlg.cpp \
	src/VBoxGlobalSettings.cpp \
	src/VBoxHelpActions.cpp \
	src/VBoxMediaManagerDlg.cpp \
	src/VBoxMedium.cpp \
	src/VBoxSelectorWnd.cpp \
	src/VBoxSnapshotDetailsDlg.cpp \
	src/VBoxSnapshotsWgt.cpp \
	src/VBoxTakeSnapshotDlg.cpp \
	src/VBoxUpdateDlg.cpp \
	src/VBoxVMInformationDlg.cpp \
	src/VBoxVMListView.cpp \
	src/VBoxVMLogViewer.cpp \
	src/globals/COMDefs.cpp \
	src/globals/VBoxDefs.cpp \
	src/globals/VBoxGlobal.cpp \
	src/globals/VBoxProblemReporter.cpp \
	src/extensions/QIAdvancedSlider.cpp \
	src/extensions/QIArrowButtonPress.cpp \
	src/extensions/QIArrowButtonSwitch.cpp \
	src/extensions/QIArrowSplitter.cpp \
	src/extensions/QIDialog.cpp \
	src/extensions/QIDialogButtonBox.cpp \
	src/extensions/QIFileDialog.cpp \
	src/extensions/QIHotKeyEdit.cpp \
	src/extensions/QILabel.cpp \
	src/extensions/QILabelSeparator.cpp \
	src/extensions/QILineEdit.cpp \
	src/extensions/QIListView.cpp \
	src/extensions/QIMainDialog.cpp \
	src/extensions/QIMessageBox.cpp \
	src/extensions/QIRichToolButton.cpp \
	src/extensions/QISplitter.cpp \
	src/extensions/QIStateIndicator.cpp \
	src/extensions/QIStatusBar.cpp \
	src/extensions/QITreeView.cpp \
	src/extensions/QITreeWidget.cpp \
	src/extensions/QIWidgetValidator.cpp \
	src/extensions/QIWizard.cpp \
	src/settings/VBoxSettingsDialog.cpp \
	src/settings/VBoxSettingsDialogSpecific.cpp \
	src/settings/VBoxSettingsSelector.cpp \
	src/settings/global/VBoxGLSettingsGeneral.cpp \
	src/settings/global/VBoxGLSettingsInput.cpp \
	src/settings/global/VBoxGLSettingsUpdate.cpp \
	src/settings/global/VBoxGLSettingsLanguage.cpp \
	src/settings/global/VBoxGLSettingsNetwork.cpp \
	src/settings/global/VBoxGLSettingsNetworkDetails.cpp \
	src/settings/vm/VBoxVMSettingsGeneral.cpp \
	src/settings/vm/VBoxVMSettingsSystem.cpp \
	src/settings/vm/VBoxVMSettingsDisplay.cpp \
	src/settings/vm/VBoxVMSettingsHD.cpp \
	src/settings/vm/VBoxVMSettingsAudio.cpp \
	src/settings/vm/VBoxVMSettingsNetwork.cpp \
	src/settings/vm/VBoxVMSettingsSerial.cpp \
	src/settings/vm/VBoxVMSettingsParallel.cpp \
	src/settings/vm/VBoxVMSettingsUSB.cpp \
	src/settings/vm/VBoxVMSettingsUSBFilterDetails.cpp \
	src/settings/vm/VBoxVMSettingsSF.cpp \
	src/settings/vm/VBoxVMSettingsSFDetails.cpp \
	src/wizards/newvm/UINewVMWzd.cpp \
	src/wizards/newhd/UINewHDWzd.cpp \
	src/wizards/firstrun/UIFirstRunWzd.cpp \
	src/wizards/exportappliance/UIExportApplianceWzd.cpp \
	src/wizards/importappliance/UIImportApplianceWzd.cpp \
	src/widgets/VBoxApplianceEditorWgt.cpp \
	src/widgets/VBoxBootTable.cpp \
	src/widgets/UIDownloader.cpp \
	src/widgets/UIDownloaderAdditions.cpp \
	src/widgets/UIDownloaderUserManual.cpp \
	src/widgets/VBoxExportApplianceWgt.cpp \
	src/widgets/VBoxFilePathSelectorWidget.cpp \
	src/widgets/VBoxGuestRAMSlider.cpp \
	src/widgets/VBoxImportApplianceWgt.cpp \
	src/widgets/VBoxLineTextEdit.cpp \
	src/widgets/VBoxMediaComboBox.cpp \
	src/widgets/VBoxMiniToolBar.cpp \
	src/widgets/VBoxOSTypeSelectorButton.cpp \
	src/widgets/VBoxOSTypeSelectorWidget.cpp \
	src/widgets/VBoxProgressDialog.cpp \
	src/widgets/VBoxSpecialControls.cpp \
	src/widgets/VBoxWarningPane.cpp \
	src/runtime/UISession.cpp \
	src/runtime/UIActionsPool.cpp \
	src/runtime/UIIndicatorsPool.cpp \
	src/runtime/UIFrameBuffer.cpp \
	src/runtime/UIFrameBufferQGL.cpp \
	src/runtime/UIFrameBufferQImage.cpp \
	src/runtime/UIFrameBufferSDL.cpp \
	src/runtime/UIMachine.cpp \
	src/runtime/UIMachineLogic.cpp \
	src/runtime/UIMachineWindow.cpp \
	src/runtime/UIMachineView.cpp \
	src/runtime/UIMachineMenuBar.cpp \
	src/runtime/UIMultiScreenLayout.cpp \
	src/runtime/normal/UIMachineLogicNormal.cpp \
	src/runtime/normal/UIMachineWindowNormal.cpp \
	src/runtime/normal/UIMachineViewNormal.cpp \
	src/runtime/fullscreen/UIMachineLogicFullscreen.cpp \
	src/runtime/fullscreen/UIMachineWindowFullscreen.cpp \
	src/runtime/fullscreen/UIMachineViewFullscreen.cpp \
	src/runtime/seamless/UIMachineLogicSeamless.cpp \
	src/runtime/seamless/UIMachineWindowSeamless.cpp \
	src/runtime/seamless/UIMachineViewSeamless.cpp
VirtualBox_SOURCES.win += \
	src/runtime/UIFrameBufferDirectDraw.cpp
VirtualBox_SOURCES.darwin += \
	src/runtime/UIFrameBufferQuartz2D.cpp \
	src/darwin/UIAbstractDockIconPreview.cpp \
	src/darwin/UICocoaDockIconPreview.mm

if1of ($(KBUILD_TARGET), freebsd linux netbsd openbsd solaris) # X11
 ifndef VBOX_OSE
  VirtualBox_QT_MOCHDRS += \
 	src/VBoxLicenseViewer.h
  VirtualBox_SOURCES += \
 	src/VBoxLicenseViewer.cpp
 else
  VirtualBox_VBOX_EXTRA_NLS_SOURCES += \
 	src/VBoxLicenseViewer.h \
 	src/VBoxLicenseViewer.cpp
 endif
 VirtualBox_SOURCES += \
 	src/X11/XKeyboard-new.cpp \
 	src/X11/VBoxX11Helper.cpp
else
 VirtualBox_VBOX_EXTRA_NLS_SOURCES += \
 	src/VBoxLicenseViewer.h \
 	src/VBoxLicenseViewer.cpp
endif

ifdef VBOX_WITH_REGISTRATION
 VirtualBox_SOURCES += \
	src/wizards/registration/UIRegistrationWzd.cpp
endif

VirtualBox_SOURCES.win += \
	src/win/VirtualBox.rc

VirtualBox_SOURCES.darwin += \
	src/darwin/DarwinKeyboard.cpp \
	src/darwin/VBoxUtils-darwin.cpp

ifdef VBOX_WITH_ICHAT_THEATER
 VirtualBox_SOURCES.darwin += \
 	src/darwin/VBoxIChatTheaterWrapper.m
endif

ifdef VBOX_WITH_COCOA_QT
 VirtualBox_DEFS += VBOX_DARWIN_USE_NATIVE_CONTROLS
 VirtualBox_SOURCES.darwin += \
 	src/darwin/VBoxCocoaApplication.m \
 	src/darwin/VBoxUtils-darwin-cocoa.mm \
 	src/darwin/VBoxCocoaSpecialControls.mm
 VirtualBox_QT_MOCHDRS.darwin = \
 	src/darwin/VBoxCocoaSpecialControls.h
endif

if defined(VBOX_WITH_VIDEOHWACCEL) || defined(VBOX_GUI_USE_QGL)
 VirtualBox_SOURCES += \
 	src/VBoxFBQGL.cpp \
 	src/VBoxFBOverlay.cpp \
 	src/VBoxGLSupportInfo.cpp
endif
# The Qt modules we're using.
# (The include directory and lib/framework for each module will be added by the Qt4 unit.)
VirtualBox_QT_MODULES = Core Gui Network

if defined(VBOX_WITH_VIDEOHWACCEL) || defined(VBOX_GUI_USE_QGL)
 VirtualBox_QT_MODULES += OpenGL
endif

# Import QDesigner UI sources and translations from VBoxUI.pro.
ifndef VBOX_WITH_REGISTRATION
 FORMS := $(filter-out src/wizards/registration/UIRegistrationWzdPage1.ui,$(FORMS))
endif
$(eval VirtualBox_SOURCES += $(FORMS))

# Resource files with some OSE differences (VirtualBoxBrand.qrc is created further down).
VirtualBox_SOURCES += VirtualBox1.qrc
VirtualBox1.qrc_RCCFLAGS = -name BASIC1
VirtualBox_SOURCES += VirtualBox2.qrc
VirtualBox2.qrc_RCCFLAGS = -name BASIC2
ifeq ($(KBUILD_TARGET),darwin)
 VirtualBox_SOURCES += VirtualBoxMac.qrc
 VirtualBoxMac.qrc_RCCFLAGS = -name MAC
else
 VirtualBox_SOURCES += VirtualBoxOther.qrc
 VirtualBoxOther.qrc_RCCFLAGS = -name OTHER
endif
VirtualBox_SOURCES += $(VBOX_VIRTUALBOX4_OUT_DIR)/VirtualBoxBrand.qrc
$(VBOX_VIRTUALBOX4_OUT_DIR)/VirtualBoxBrand.qrc_RCCFLAGS = -name BRAND
if defined(VBOX_WITH_VIDEOHWACCEL) || defined(VBOX_GUI_USE_QGL)
 VirtualBox_SOURCES += VirtualBoxShaders.qrc
 VirtualBoxShaders.qrc_RCCFLAGS = -name SHADERS
endif

# Import the translation source from VBoxUI.pro and add the qt_xx_YY counterparts
VirtualBox_QT_TRANSLATIONS := $(TRANSLATIONS) \
	$(patsubst nls/VirtualBox_%.ts,nls/qt_%.ts, $(filter nls/VirtualBox_%.ts,$(TRANSLATIONS)))
# Compress the translation units.
VirtualBox_LRCFLAGS = -silent
# Where to install the translations (a separate install target, VirtualBox-nls-inst is created).
VirtualBox_QT_TRANSLATIONS_INST = $(INST_BIN)nls/


## @todo how to detect what tool is used?
## @todo GCC3 seems to lack -Wno-missing-base-class-initializer, so we use
#  more generic -Wno-extra
# bird: What about $(if $(VBOX_GCC_Wno-missing-base-class-initializer),$(VBOX_GCC_Wno-missing-base-class-initializer),$(VBOX_GCC_Wno-extra))?
ifdef VBOX_WITH_XPCOM
 VirtualBox_src/globals/COMDefs.cpp_CXXFLAGS  = $(VBOX_GCC_Wno-extra)
endif


#
# Generate the COM wrappers.
#
## @todo This needs some cleaning up perhaps...
## @todo kBuild: Non-existing +| targets should be tried remade or what?
VirtualBox_BLDDIRS       += $(PATH_VirtualBox)/include
VirtualBox_INTERMEDIATES += $(PATH_VirtualBox)/include/COMWrappers.h
VirtualBox_CLEAN         += \
	$(PATH_VirtualBox)/include/COMWrappers \
	$(PATH_VirtualBox)/include/COMWrappers.tmp \
	$(PATH_VirtualBox)/include/COMWrappers.h \
	$(PATH_VirtualBox)/include/COMWrappers.cpp
VirtualBox_SOURCES       += $(PATH_VirtualBox)/include/COMWrappers.cpp

$$(PATH_VirtualBox)/include/COMWrappers \
+| $$(PATH_VirtualBox)/include/COMWrappers.h \
+| $$(PATH_VirtualBox)/include/COMWrappers.cpp: \
		$(VBOX_XIDL_FILE) \
		$(VBOX_VIRTUALBOX4_SRC)/src/globals/COMWrappers.xsl \
		| $$(dir $$@)
	$(call MSG_GENERATE,VirtualBox,$<,$@)
	$(QUIET)$(RM) -f $@ $@.tmp $@.h $@.cpp
	$(QUIET)$(VBOX_XSLTPROC) -o $@ $(VBOX_VIRTUALBOX4_SRC)/src/globals/COMWrappers.xsl $<

	$(QUIET)$(SED) -e '1,/\/\/ wrapper definitions/ !d' \
		--output $@.tmp $@
	$(QUIET)$(CP) --changed $@.tmp $@.h

	$(QUIET)$(APPEND) -t -n $@.tmp \
		'/*' \
		' * DO NOT EDIT! This is a generated file, see COMWrappers.h for details.' \
		' */' \
		'' \
		'#include "VBoxGlobal.h"' \
		''
	$(QUIET)$(SED) -e '/\/\/ wrapper definitions/,9999999 !d' \
		-e 's/^inline //' \
		--append $@.tmp $@
	$(QUIET)$(CP) --changed $@.tmp $@.cpp
	$(QUIET)$(RM) -f $@.tmp


# alias for generating the COM Wrappers file.
testwrappers:: $$(PATH_VirtualBox)/include/COMWrappers.h


#
# Generate qrc file with branded icons.
#
VirtualBox_BLDDIRS       += $(VBOX_VIRTUALBOX4_OUT_DIR)
VirtualBox_CLEAN         += $(VBOX_VIRTUALBOX4_OUT_DIR)/VirtualBoxBrand.qrc
$(VBOX_VIRTUALBOX4_OUT_DIR)/VirtualBoxBrand.qrc: \
		$(VBOX_VIRTUALBOX4_SRC)/VirtualBoxBrand.qrc \
		| $$(dir $$@)
	$(call MSG_GENERATE,VirtualBox,$<,$@)
	$(QUIET)$(SED) \
		-e 's;@VBOX_ABOUT_PNG@;$(VBOX_BRAND_GUI_ABOUT_PNG);g' \
		-e 's;@VBOX_ABOUT_16PX_PNG@;$(VBOX_BRAND_GUI_ABOUT_16PX_PNG);g' \
		-e 's;@VBOX_VBOX_16PX_PNG@;$(VBOX_BRAND_GUI_VBOX_16PX_PNG);g' \
		-e 's;@VBOX_VBOX_20PX_PNG@;$(VBOX_BRAND_GUI_VBOX_20PX_PNG);g' \
		-e 's;@VBOX_VBOX_32PX_PNG@;$(VBOX_BRAND_GUI_VBOX_32PX_PNG);g' \
		-e 's;@VBOX_VBOX_40PX_PNG@;$(VBOX_BRAND_GUI_VBOX_40PX_PNG);g' \
		-e 's;@VBOX_VBOX_48PX_PNG@;$(VBOX_BRAND_GUI_VBOX_48PX_PNG);g' \
		-e 's;@VBOX_VBOX_64PX_PNG@;$(VBOX_BRAND_GUI_VBOX_64PX_PNG);g' \
		-e 's;@VBOX_CUBE_42PX_PNG@;$(VBOX_BRAND_GUI_CUBE_42PX_PNG);g' \
		--output $@ \
		$<


#
# Precompiled header - non-functional atm.
#
ifdef VBOX_WITH_PRECOMPILED_HEADERS
VirtualBox_INCS          <= $(VirtualBox_0_OUTDIR)/include
VirtualBox_DEFS          += VBOX_WITH_PRECOMPILED_HEADERS
VirtualBox_CXXFLAGS      += -Winvalid-pch -fpch-preprocess
VirtualBox_INTERMEDIATES += $(VirtualBox_0_OUTDIR)/include/precomp.h.gch

tstx: $$(VirtualBox_0_OUTDIR)/include/precomp.h.gch

$$(VirtualBox_0_OUTDIR)/include/precomp.h.gch: \
		$(PATH_SUB_CURRENT)/src/precomp.h \
		$$(VirtualBox_0_OUTDIR)/include/COMWrappers.h \
		$$(filter %.gen.h, $$(VirtualBox_INTERMEDIATES) ) \
		$(VBOX_PATH_SDK)/bindings/xpcom/include/VirtualBox_XPCOM.h \
		| $$(dir $$@)
	time 'g++-4.0' \
		'-c' \
		'-g' \
		$(if-expr "$(KBUILD_TYPE)" == "debug", , -O2 ) \
		'-pipe' \
		'-Wall' \
		'-Wextra' \
		'-Wno-missing-field-initializers' \
		'-Wno-trigraphs' \
		'-frtti' \
		'-fno-exceptions' \
		'-Wno-non-virtual-dtor' \
		'-Wno-long-long' \
		\
		'-fshort-wchar' \
		'-fno-strict-aliasing' \
		'-fvisibility=hidden' \
		'-DVBOX_HAVE_VISIBILITY_HIDDEN' \
		'-DRT_USE_VISIBILITY_DEFAULT' \
		'-fvisibility-inlines-hidden' \
		'-Winvalid-pch' \
		'-fpch-preprocess' \
		\
		'-F$(PATH_SDK_QT4)/Frameworks' \
		'-mmacosx-version-min=10.5' \
		'-isysroot' \
		'/Developer/SDKs/MacOSX10.5.sdk' \
		'-m32' \
		\
		$(foreach inc,$(VirtualBox_INCS),\$(NL)$(TAB)-I$(inc)) \
		'-I$(PATH_ROOT)/include' \
		'-I$(PATH_OUT)' \
		'-DVBOX' \
		'-DVBOX_WITH_DEBUGGER' \
		'-DVBOX_WITH_64_BITS_GUESTS' \
		$(if-expr "$(KBUILD_TYPE)" == "debug", '-DDEBUG' '-DDEBUG_bird' '-DDEBUG_USERNAME=bird' '-DVBOX_CHECK_STATE' ,) \
		'-DRT_OS_DARWIN' \
		'-D__DARWIN__' \
		'-DRT_ARCH_X86' \
		'-D__X86__' \
		'-DIN_RING3' \
		'-DQT_NO_DEBUG' \
		'-DQT_THREAD_SUPPORT' \
		'-DQT_SHARED' \
		'-DHAVE_CONFIG_H' \
		'-DHC_ARCH_BITS=32' \
		'-DGC_ARCH_BITS=64' \
		'-DVBOX_WITH_XPCOM' \
		'-DVBOX_WITH_REGISTRATION' \
		'-DVBOX_WITH_REGISTRATION_REQUEST' \
		'-DVBOX_WITH_UPDATE_REQUEST' \
		'-DVBOX_WITH_ALSA' \
		'-DVBOX_WITH_PULSE' \
		'-DVBOX_WITH_E1000' \
		'-DVBOX_WITH_NETFLT' \
		'-DVBOX_WITH_DEBUGGER_GUI' \
		$(if-expr "$(KBUILD_TYPE)" != "release", '-DVBOX_WITH_DEBUGGER_GUI_MENU', ) \
		'-DVBOX_WITH_VIDEOHWACCEL' \
		'-DVBOX_GUI_USE_QGL' \
		'-DVBOX_WITH_VIRTIO' \
		'-DVBOX_WITH_PRECOMPILED_HEADERS' \
		'-DVBOX_DARWIN_USE_NATIVE_CONTROLS' \
		'-DQT_CORE_LIB' \
		'-DQT_GUI_LIB' \
		'-DQT_NETWORK_LIB' \
		'-DQT_OPENGL_LIB' \
		'-DMAC_OS_X_VERSION_MIN_REQUIRED=1050' \
		'-DMAC_OS_X_VERSION_MAX_ALLOWED=1050' \
		'-DVBOX_GUI_USE_QUARTZ2D' \
		'-DVBOX_GUI_USE_QIMAGE' \
		'-o' $@ $<
endif

ifeq ($(KBUILD_TARGET),win)
#
# On Windows we'll have to generate/edit part of the resource file.
# The IDI_ICON1 name is Qt specific.
#
src/win/VirtualBox.rc_INCS  = $(PATH_VirtualBox)
src/win/VirtualBox.rc_DEPS  = $(PATH_VirtualBox)/VirtualBox-icon.rc
src/win/VirtualBox.rc_CLEAN = $(PATH_VirtualBox)/VirtualBox-icon.rc

$$(PATH_VirtualBox)/VirtualBox-icon.rc: $(MAKEFILE_CURRENT) $(VBOX_WINDOWS_ICON_FILE) | $$(dir $$@)
	$(APPEND) -t $@ 'IDI_ICON1 ICON "$(subst /,\\,$(VBOX_WINDOWS_ICON_FILE))"'

endif # win


ifeq ($(KBUILD_TARGET),darwin)
#
# Create directories for each approved language or the application
# menu won't be translated.
#
INSTALLS += VirtualBox.lproj
VirtualBox.lproj_INST = $(INST_VIRTUALBOX)Contents/Resources/
VirtualBox.lproj_MODE = 755
VirtualBox.lproj_DIRS := $(addsuffix .lproj,$(VBOX_APPROVED_GUI_LANGUAGES))

#
# On OS X (darwin) we need to install icon resources and compulsory bundle contents.
# The VirtualBoxVM.app helper is for launching VMs (fixes some issues with the dock).
#
INSTALLS += VirtualBox.app
VirtualBox.app_INST = $(INST_VIRTUALBOX)Contents/
VirtualBox.app_MODE = 644
VirtualBox.app_SOURCES = \
	src/darwin/PkgInfo \
	$(PATH_VirtualBox.app)/Info.plist \
	$(VBOX_MACOSX_ICON_FILE)=>Resources/virtualbox.icns

$$(PATH_VirtualBox.app)/Info.plist: $(PATH_SUB_CURRENT)/src/darwin/Info.plist $(VBOX_VERSION_MK) | $$(@D)/
	$(call MSG_GENERATE,VirtualBox.app,$<,$@)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(SED) \
		-e 's/@VBOX_VERSION_STRING@/$(VBOX_VERSION_STRING)/g' \
		-e 's/@VBOX_VERSION_MAJOR@/$(VBOX_VERSION_MAJOR)/g' \
		-e 's/@VBOX_VERSION_MINOR@/$(VBOX_VERSION_MINOR)/g' \
		-e 's/@VBOX_VERSION_BUILD@/$(VBOX_VERSION_BUILD)/g' \
		-e 's/@VBOX_VENDOR@/$(VBOX_VENDOR)/g' \
		-e 's/@VBOX_PRODUCT@/$(VBOX_PRODUCT)/g' \
		-e 's/@VBOX_C_YEAR@/$(VBOX_C_YEAR)/g' \
		$< > $@

INSTALLS += VirtualBoxVM.app
VirtualBoxVM.app_INST = $(VirtualBox.app_INST)Resources/VirtualBoxVM.app/Contents/
VirtualBoxVM.app_MODE = 644
VirtualBoxVM.app_SOURCES = \
	src/darwin/VM-PkgInfo=>PkgInfo \
	$(PATH_VirtualBoxVM.app)/VM-Info.plist=>Info.plist
VirtualBoxVM.app_SYMLINKS = \
	MacOS=>../../../MacOS/ \
	Resources=>../../../Resources/

$$(PATH_VirtualBoxVM.app)/VM-Info.plist: $(PATH_SUB_CURRENT)/src/darwin/VM-Info.plist $(VBOX_VERSION_MK) | $$(@D)/
	$(call MSG_GENERATE,VirtualBoxVM.app,$<,$@)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(SED) \
		-e 's/@VBOX_VERSION_STRING@/$(VBOX_VERSION_STRING)/g' \
		-e 's/@VBOX_VERSION_MAJOR@/$(VBOX_VERSION_MAJOR)/g' \
		-e 's/@VBOX_VERSION_MINOR@/$(VBOX_VERSION_MINOR)/g' \
		-e 's/@VBOX_VERSION_BUILD@/$(VBOX_VERSION_BUILD)/g' \
		-e 's/@VBOX_VENDOR@/$(VBOX_VENDOR)/g' \
		-e 's/@VBOX_PRODUCT@/$(VBOX_PRODUCT)/g' \
		-e 's/@VBOX_C_YEAR@/$(VBOX_C_YEAR)/g' \
		--output $@ $<
endif # darwin

#
# App for testing GL support
#
if defined(VBOX_WITH_VIDEOHWACCEL)
 if1of ($(KBUILD_TARGET), win linux)
  LIBRARIES += VBoxOGL2D
  VBoxOGL2D_TEMPLATE = VBOXR3STATIC
  VBoxOGL2D_USES = qt4
  VBoxOGL2D_SDKS = QT4
  VBoxOGL2D_DEFS = IN_RING3 QT_NO_DEBUG QT_THREAD_SUPPORT QT_SHARED HAVE_CONFIG_H $(ARCH_BITS_DEFS) VBOX_WITH_VIDEOHWACCEL VBOX_GUI_USE_QGL
  VBoxOGL2D_QT_MODULES += OpenGL
  VBoxOGL2D_SOURCES = \
  	src/VBoxGLSupportInfo.cpp
  VBoxOGL2D_INCS = include
 endif
endif

#
# Testcase for the darwin keyboard routines.
#
ifdef VBOX_WITH_TESTCASES
PROGRAMS.darwin += tstDarwinKeyboard
tstDarwinKeyboard_NAME = tstDarwinKeyboard
tstDarwinKeyboard_TEMPLATE = VBOXR3TSTEXE
tstDarwinKeyboard_DEFS.x86 = USE_HID_FOR_MODIFIERS
tstDarwinKeyboard_INCS = include
tstDarwinKeyboard_SOURCES = \
	src/darwin/tstDarwinKeyboard.cpp \
	src/darwin/DarwinKeyboard.cpp
tstDarwinKeyboard_SOURCES.amd64 = \
	src/darwin/VBoxCocoaApplication.m
tstDarwinKeyboard_LDFLAGS = -framework IOKit -framework Carbon -framework AppKit
tstDarwinKeyboard_LIBS = \
	$(LIB_RUNTIME)
endif


# Unset everything that was loaded from VBoxUI.pro.
TEMPLATE := $(SAVED_TEMPLATE)
SAVED_TEMPLATE :=
LANGUAGE :=
FORMS :=
TRANSLATIONS :=
IMAGES :=


# Commit the magic.
# (note: before custom rules that make usage of generated variables!).
include $(KBUILD_PATH)/subfooter.kmk

#
# Update all known NLS translation (.ts) files in the nls/ subdirectory.
#
# NOTE: This target is intended to be run only by the GUI maintainer shortly
# before a new product release. VirtualBox_xx_YY.ts is a template for new
# languages and should never be actually translated or installed.
#
# For Qt >= 4.6.0 it maybe necessary to add -I $(VBOX_GUI_INC_DIRS) to the
# lupdate call
#
#VirtualBox_QT_TRANSLATIONS = nls/VirtualBox_de.ts
updatenls:: makeallnls nls/VirtualBox_en.ts

makeallnls:: \
		$(foreach header,$(VBOX_GUI_INC_DIRS),$(wildcard $(header)/*.h)) \
		$(filter-out %.qrc,$(VirtualBox_SOURCES) $(VirtualBox_VBOX_EXTRA_NLS_SOURCES))
	$(call MSG_L1,lupdate all languages (nls/*.ts))
	$(QUIET)$(TOOL_QT4_LUPDATE) \
		$^ \
		-ts \
		$(filter-out nls/VirtualBox_en.ts,$(filter-out nls/qt_%.ts,$(VirtualBox_QT_TRANSLATIONS))) \
		nls/VirtualBox_xx_YY.ts

# Create the English translation file. This is something special cause it will
# contain the plural forms only.
nls/VirtualBox_en.ts: \
		$(foreach header,$(VBOX_GUI_INC_DIRS),$(wildcard $(header)/*.h)) \
		$(filter-out %.qrc,$(VirtualBox_SOURCES) $(VirtualBox_VBOX_EXTRA_NLS_SOURCES))
	$(call MSG_L1,lupdate $@)
	$(QUIET)$(TOOL_QT4_LUPDATE) \
		$^ \
		-ts \
		$@
	$(QUIET)$(SED) -n -i -e \
		'/<context>/,/<\/context>/!p;/<context>/h;/<name>/H;/<message numerus="yes">/,/<\/message>/H;/<\/context>/{H;x;/<message/p}' \
	$@

